class Solution {
    public int[][] highFive(int[][] items) {
        Map<Integer, PriorityQueue<Integer>> mp = new HashMap<>();

        // Step 1: Collect top 5 scores for each student
        for (int[] item : items) {
            int id = item[0];
            int score = item[1];

            mp.putIfAbsent(id, new PriorityQueue<>()); // minHeap by default

            PriorityQueue<Integer> minHeap = mp.get(id);
            minHeap.add(score);

            if (minHeap.size() > 5) {
                minHeap.poll(); // remove smallest, keep top 5
            }
        }

        // Step 2: Build result
        int sz = mp.size();
        int[][] res = new int[sz][2];
        int idx = 0;

        for (Map.Entry<Integer, PriorityQueue<Integer>> entry : mp.entrySet()) {
            int id = entry.getKey();
            PriorityQueue<Integer> pq = entry.getValue();

            int sum = pq.stream().reduce(0, Integer::sum);
            res[idx][0] = id;
            res[idx][1] = sum / pq.size(); // average of available (should be 5)
            idx++;
        }

        return res;
    }
}
